namespace Library

open Helpers

[<SolutionModule>]
module Problem2 =

    let solution () =
        printfn "Begin with the first two terms: 1 and 2. Build list until limit of 4,000,000 is reached"
        let timer = System.Diagnostics.Stopwatch.StartNew()
        
        let fibonacciLessThan n = 
            let firstTwo = [ 2 ; 1 ]
            let rec buildFibonacci startingSeq =
                match startingSeq with
                | h :: t ->
                    let nxtFib = h + List.head t
                    if nxtFib > n then
                        startingSeq
                    else
                        buildFibonacci (nxtFib :: startingSeq)
                | _ -> 
                    []
                
            buildFibonacci firstTwo

        let allOfThem = fibonacciLessThan 4000000
        
        printfn "There are %d fibonacci numbers less than 4,000,000" (List.length allOfThem) |> ignore
        printfn "%A" allOfThem
        let ans = 
            allOfThem
            |> List.sumBy(fun x -> 
                match x % 2 with
                | 0 -> x
                | _ -> 0)
        
        let elapsed = timer.ElapsedMilliseconds
        printfn "Answer: %i Elapsed : %i ms" ans elapsed 

        ans |> string

    [<Solution(2)>]
    let problem () = {
        Title = "Even Fibonacci numbers"
        Description = "
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
        Solution = solution }